# \[(\d+\.\d+)s\](?:\[.*?\])+ GC\((\d+)\) ((?:Pause(?=.*ms))|(?:Concurrent(?=.*ms))|(?:Garbage Collection)) (?:((?:\w+ ?){1,3}) )?((?:\((?:\w+ ?){1,3}\) ){0,3})(?:(\d+)\w->(\d+)\w(?:\((\d+)\w\)?)?)?(?= ?(\d+\.\d+)ms)




def regex_or(*terms):
    new_tuples = []
    new_tuples.append(("(?:(?:" + terms[0][0] + ")", terms[0][1], terms[0][2]))

    for index in range(1, len(terms) - 1):
        new_tuples.append(("|(?:" + terms[index][0] +")", terms[index][1], terms[index][2]))
    
    new_tuples.append(("|(?:" + terms[-1][0] + "))", terms[-1][1], terms[-1][2]))
        
    return new_tuples

def regex_optional(term):
    return "(?:" + term[0] + ")?", term[1], term[2]

def get_format():
    
    date_time = "(?:\[(\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d\.\d{3}[+-]\d{4})\])", "DateTime", str  
    time_seconds = "\[(\d+\.\d+)s\]", "TimeFromStart_seconds", float   
    time_nanoseconds = "\[(\d+)ns\]", "TimeFromStart_ns", float
    time_miliseconds = "\[(\d+)ms\]", "TimeFromStart_ms", float 

    other_info_fields = "((?:\[.*?\])*)", "Other Fields", str
    
    gc_event_number = " GC\((\d+)\) ", "GCIndex", int
    gc_event_type = "((?:Pause(?=.*ms))|(?:Concurrent(?=.*ms))|(?:Garbage Collection)) ", "EventType", str
    gc_event_name = "(?:((?:\w+ ?){1,3}) )?", "EventName", str  # Young    *
    gc_additional_info = "((?:\((?:\w+ ?){1,3}\) ){0,3})", "AdditionalEventInfo", str  # (Evacuation Pause)    *

    heap_before_gc = "(\d+)\w->", "HeapBeforeGC", float
    heap_after_gc = "(\d+)\w", "HeapAfterGC", float
    max_heap_size = "\((\d+)\w\)", "MaxHeapsize", float 
    time_spent_milliseconds = " ?(\d+\.\d+)ms", "Duration_milliseconds", float  # 24.321ms

    default_logging_format = [
        ("^", None, None ),
        *regex_or(date_time, time_seconds, time_nanoseconds, time_miliseconds) , 
        other_info_fields ,
        gc_event_number ,
        gc_event_type ,
        gc_event_name , 
        gc_additional_info , 
        regex_optional(heap_before_gc) ,
        regex_optional(heap_after_gc) ,
        regex_optional(max_heap_size) ,
        time_spent_milliseconds
        ]
    regex_group, column_name, data_type = [], [], []
    
    for capture_group in default_logging_format:
    
        regex_group.append(capture_group[0])
        column_name.append(capture_group[1])
        data_type.append(capture_group[2])
        
    capture_string = "".join(regex_group)
    return capture_string, column_name, data_type

def get_zgc_format():

# Note: nanoseconds, seconds, 

# There are other formatts for timing passed.
# uptime -- Time since the start of the JVM in seconds and milliseconds (e.g., 6.567s)
# timemillis -- The same value as generated by System.currentTimeMillis()
# uptimemillis -- Milliseconds since the JVM started
# timenanos -- The same value as generated by System.nanoTime()
# uptimenanos -- Nanoseconds since the JVM started

# https://openjdk.java.net/jeps/158 -> Explains the logging on this topic